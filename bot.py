import asyncio
import re
import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

TOKEN = "7847443343:AAGGEHCZCNFJSokQGZy8Vtc87zBa1KeMys4"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
reminders = {}  # {user_id: [(datetime, message), ...]}

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: '14:30 –ö—É–ø–∏—Ç—å —Ö–ª–µ–±', –∏ —è –Ω–∞–ø–æ–º–Ω—é!")

async def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help"""
    await update.message.reply_text("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM –¢–µ–∫—Å—Ç' ‚Äî —è –Ω–∞–ø–æ–º–Ω—é!\n\n/list ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

async def list_reminders(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.chat_id
    if user_id not in reminders or not reminders[user_id]:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    text = "\n".join([f"{t.strftime('%H:%M')} - {m}" for t, m in reminders[user_id]])
    await update.message.reply_text(f"–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{text}")

async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—â–µ—Ç –≤ –Ω–∏—Ö –≤—Ä–µ–º—è"""
    user_id = update.message.chat_id
    text = update.message.text

    # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
    match = re.match(r"(\d{1,2}:\d{2})\s+(.+)", text)
    if not match:
        return  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    time_str, message_text = match.groups()

    try:
        remind_time = datetime.datetime.strptime(time_str, "%H:%M").time()
        now = datetime.datetime.now()
        remind_datetime = datetime.datetime.combine(now.date(), remind_time)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        if remind_datetime < now:
            remind_datetime += datetime.timedelta(days=1)

    except ValueError:
        return  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    if user_id not in reminders:
        reminders[user_id] = []

    reminders[user_id].append((remind_datetime, message_text))
    await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}: {message_text}")

async def reminder_checker():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è"""
    while True:
        now = datetime.datetime.now()
        for user_id in list(reminders.keys()):
            for remind_datetime, message in reminders[user_id][:]:
                if now >= remind_datetime:
                    app = Application.builder().token(TOKEN).build()
                    await app.bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")
                    reminders[user_id].remove((remind_datetime, message))

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if not reminders[user_id]:
                del reminders[user_id]

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    global app
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_reminders))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    loop = asyncio.get_event_loop()
    loop.create_task(reminder_checker())

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
